{
  "_args": [
    [
      {
        "raw": "command-line-args",
        "scope": null,
        "escapedName": "command-line-args",
        "name": "command-line-args",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/abhishek/my work/signage/jsxbeautifier"
    ]
  ],
  "_from": "command-line-args@latest",
  "_id": "command-line-args@4.0.7",
  "_inCache": true,
  "_location": "/command-line-args",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/command-line-args-4.0.7.tgz_1502318903673_0.8981017954647541"
  },
  "_npmUser": {
    "name": "75lb",
    "email": "75pound@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "command-line-args",
    "scope": null,
    "escapedName": "command-line-args",
    "name": "command-line-args",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/command-line-args/-/command-line-args-4.0.7.tgz",
  "_shasum": "f8d1916ecb90e9e121eda6428e41300bfb64cc46",
  "_shrinkwrap": null,
  "_spec": "command-line-args",
  "_where": "/home/abhishek/my work/signage/jsxbeautifier",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "bin": {
    "command-line-args": "bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/75lb/command-line-args/issues"
  },
  "dependencies": {
    "array-back": "^2.0.0",
    "find-replace": "^1.0.3",
    "typical": "^2.6.1"
  },
  "description": "A mature, feature-complete library to parse command-line options.",
  "devDependencies": {
    "coveralls": "^2.13.1",
    "jsdoc-to-markdown": "^3.0.0",
    "test-runner": "^0.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-aUdPvQRAyBvQd2n7jXcsMDz68ckBJELXNzBybCHOibUWEg0mWTnaYCSRU8h9R+aNRSvDihJtssSRCiDRpLaezA==",
    "shasum": "f8d1916ecb90e9e121eda6428e41300bfb64cc46",
    "tarball": "https://registry.npmjs.org/command-line-args/-/command-line-args-4.0.7.tgz"
  },
  "gitHead": "144804e3e2ac1f099c7015db5f94de35c28a6078",
  "homepage": "https://github.com/75lb/command-line-args#readme",
  "keywords": [
    "argv",
    "parse",
    "argument",
    "args",
    "option",
    "options",
    "parser",
    "parsing",
    "cli",
    "command",
    "line"
  ],
  "license": "MIT",
  "main": "lib/command-line-args.js",
  "maintainers": [
    {
      "name": "75lb",
      "email": "75pound@gmail.com"
    }
  ],
  "name": "command-line-args",
  "optionalDependencies": {},
  "readme": "[![view on npm](https://img.shields.io/npm/v/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)\n[![npm module downloads](https://img.shields.io/npm/dt/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)\n[![Build Status](https://travis-ci.org/75lb/command-line-args.svg?branch=master)](https://travis-ci.org/75lb/command-line-args)\n[![Coverage Status](https://coveralls.io/repos/github/75lb/command-line-args/badge.svg?branch=master)](https://coveralls.io/github/75lb/command-line-args?branch=master)\n[![Dependency Status](https://david-dm.org/75lb/command-line-args.svg)](https://david-dm.org/75lb/command-line-args)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n[![Join the chat at https://gitter.im/75lb/command-line-args](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/75lb/command-line-args?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# command-line-args\nA mature, feature-complete library to parse command-line options.\n\n*If your app requires a git-like command interface, consider using [command-line-commands](https://github.com/75lb/command-line-commands).*\n\n## Synopsis\nYou can set options using the main notation standards (getopt, getopt_long, etc.). These commands are all equivalent, setting the same values:\n```\n$ example --verbose --timeout=1000 --src one.js --src two.js\n$ example --verbose --timeout 1000 --src one.js two.js\n$ example -vt 1000 --src one.js two.js\n$ example -vt 1000 one.js two.js\n```\n\nTo access the values, first describe the options your app accepts (see [option definitions](#optiondefinition-)).\n```js\nconst commandLineArgs = require('command-line-args')\n\nconst optionDefinitions = [\n  { name: 'verbose', alias: 'v', type: Boolean },\n  { name: 'src', type: String, multiple: true, defaultOption: true },\n  { name: 'timeout', alias: 't', type: Number }\n]\n```\nThe [`type`](#optiontype--function) property is a setter function (the value supplied is passed through this), giving you full control over the value received.\n\nNext, parse the options using [commandLineArgs()](#commandlineargsdefinitions-argv--object-):\n```js\nconst options = commandLineArgs(optionDefinitions)\n```\n\n`options` now looks like this:\n```js\n{\n  files: [\n    'one.js',\n    'two.js'\n  ],\n  verbose: true,\n  timeout: 1000\n}\n```\n\nWhen dealing with large amounts of options it often makes sense to [group](#optiongroup--string--arraystring) them.\n\nA usage guide can be generated using [command-line-usage](https://github.com/75lb/command-line-usage), for example:\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/footer.png)\n\n### Notation rules\n\nNotation rules for setting command-line options.\n\n* Argument order is insignificant. Whether you set `--example` at the beginning or end of the arg list makes no difference.\n* Options with a [type](#optiontype--function) of `Boolean` do not need to supply a value. Setting `--flag` or `-f` will set that option's value to `true`. This is the only [type](#optiontype--function) with special behaviour.\n* Three ways to set an option value\n  * `--option value`\n  * `--option=value`\n  * `-o value`\n* Two ways to a set list of values (on options with [multiple](#optionmultiple--boolean) set)\n  * `--list one two three`\n  * `--list one --list two --list three`\n* Short options ([alias](#optionalias--string)) can be set in groups. The following are equivalent:\n  * `-a -b -c`\n  * `-abc`\n\n### Ambiguous values\n\nImagine we are using \"grep-tool\" to search for the string `'-f'`:\n\n```\n$ grep-tool --search -f\n```\n\nWe have an issue here: command-line-args will assume we are setting two options (`--search` and `-f`). In actuality, we are passing one option (`--search`) and one value (`-f`). In cases like this, avoid ambiguity by using `--option=value` notation:\n\n```\n$ grep-tool --search=-f\n```\n\n### Partial parsing\n\nBy default, if the user sets an option without a valid [definition](#exp_module_definition--OptionDefinition) an `UNKNOWN_OPTION` exception is thrown. However, in some cases you may only be interested in a subset of the options wishing to pass the remainder to another library. See [here](https://github.com/75lb/command-line-args/blob/master/example/mocha.js) for a example showing where this might be necessary.\n\nTo enable partial parsing, set `partial: true` in the method options:\n\n```js\nconst optionDefinitions = [\n  { name: 'value', type: Number }\n]\nconst options = commandLineArgs(optionDefinitions, { partial: true })\n```\n\nNow, should any unknown args be passed at the command line:\n\n```\n$ example --milk --value 2 --bread cheese\n```\n\nThey will be returned in the `_unknown` property of the `commandLineArgs` output with no exceptions thrown:\n\n```js\n{\n  value: 2,\n  _unknown: [ '--milk', '--bread', 'cheese']\n}\n```\n\n\n## Install\n\n```sh\n$ npm install command-line-args --save\n```\n\n# API Reference\n<a name=\"exp_module_command-line-args--commandLineArgs\"></a>\n\n### commandLineArgs(optionDefinitions, [options]) ⇒ <code>object</code> ⏏\nReturns an object containing all options set on the command line. By default it parses the global  [`process.argv`](https://nodejs.org/api/process.html#process_process_argv) array.\n\nBy default, an exception is thrown if the user sets an unknown option (one without a valid [definition](#exp_module_definition--OptionDefinition)). To enable __partial parsing__, invoke `commandLineArgs` with the `partial` option - all unknown arguments will be returned in the `_unknown` property.\n\n**Kind**: Exported function  \n**Throws**:\n\n- `UNKNOWN_OPTION` if `options.partial` is false and the user set an undefined option\n- `NAME_MISSING` if an option definition is missing the required `name` property\n- `INVALID_TYPE` if an option definition has a `type` value that's not a function\n- `INVALID_ALIAS` if an alias is numeric, a hyphen or a length other than 1\n- `DUPLICATE_NAME` if an option definition name was used more than once\n- `DUPLICATE_ALIAS` if an option definition alias was used more than once\n- `DUPLICATE_DEFAULT_OPTION` if more than one option definition has `defaultOption: true`\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| optionDefinitions | <code>[Array.&lt;definition&gt;](#module_definition)</code> | An array of [OptionDefinition](#exp_module_definition--OptionDefinition) objects |\n| [options] | <code>object</code> | Options. |\n| [options.argv] | <code>Array.&lt;string&gt;</code> | An array of strings, which if passed will be parsed instead  of `process.argv`. |\n| [options.partial] | <code>boolean</code> | If `true`, an array of unknown arguments is returned in the `_unknown` property of the output. |\n\n<a name=\"exp_module_definition--OptionDefinition\"></a>\n\n## OptionDefinition ⏏\nDescribes a command-line option. Additionally, you can add `description` and `typeLabel` properties and make use of [command-line-usage](https://github.com/75lb/command-line-usage).\n\n**Kind**: Exported class  \n* [OptionDefinition](#exp_module_definition--OptionDefinition) ⏏\n    * [.name](#module_definition--OptionDefinition.OptionDefinition+name) : <code>string</code>\n    * [.type](#module_definition--OptionDefinition.OptionDefinition+type) : <code>function</code>\n    * [.alias](#module_definition--OptionDefinition.OptionDefinition+alias) : <code>string</code>\n    * [.multiple](#module_definition--OptionDefinition.OptionDefinition+multiple) : <code>boolean</code>\n    * [.defaultOption](#module_definition--OptionDefinition.OptionDefinition+defaultOption) : <code>boolean</code>\n    * [.defaultValue](#module_definition--OptionDefinition.OptionDefinition+defaultValue) : <code>\\*</code>\n    * [.group](#module_definition--OptionDefinition.OptionDefinition+group) : <code>string</code> \\| <code>Array.&lt;string&gt;</code>\n\n<a name=\"module_definition--OptionDefinition.OptionDefinition+name\"></a>\n\n### option.name : <code>string</code>\nThe only required definition property is `name`, so the simplest working example is\n```js\n[\n  { name: \"file\" },\n  { name: \"verbose\" },\n  { name: \"depth\"}\n]\n```\n\nIn this case, the value of each option will be either a Boolean or string.\n\n| #   | Command line args | .parse() output |\n| --- | -------------------- | ------------ |\n| 1   | `--file` | `{ file: true }` |\n| 2   | `--file lib.js --verbose` | `{ file: \"lib.js\", verbose: true }` |\n| 3   | `--verbose very` | `{ verbose: \"very\" }` |\n| 4   | `--depth 2` | `{ depth: \"2\" }` |\n\nUnicode option names and aliases are valid, for example:\n```js\n[\n  { name: 'один' },\n  { name: '两' },\n  { name: 'три', alias: 'т' }\n]\n```\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+type\"></a>\n\n### option.type : <code>function</code>\nThe `type` value is a setter function (you receive the output from this), enabling you to be specific about the type and value received.\n\nYou can use a class, if you like:\n\n```js\nconst fs = require('fs')\n\nfunction FileDetails(filename){\n  if (!(this instanceof FileDetails)) return new FileDetails(filename)\n  this.filename = filename\n  this.exists = fs.existsSync(filename)\n}\n\nconst cli = commandLineArgs([\n  { name: 'file', type: FileDetails },\n  { name: 'depth', type: Number }\n])\n```\n\n| #   | Command line args| .parse() output |\n| --- | ----------------- | ------------ |\n| 1   | `--file asdf.txt` | `{ file: { filename: 'asdf.txt', exists: false } }` |\n\nThe `--depth` option expects a `Number`. If no value was set, you will receive `null`.\n\n| #   | Command line args | .parse() output |\n| --- | ----------------- | ------------ |\n| 2   | `--depth` | `{ depth: null }` |\n| 3   | `--depth 2` | `{ depth: 2 }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n**Default**: <code>String</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+alias\"></a>\n\n### option.alias : <code>string</code>\ngetopt-style short option names. Can be any single character (unicode included) except a digit or hypen.\n\n```js\n[\n  { name: \"hot\", alias: \"h\", type: Boolean },\n  { name: \"discount\", alias: \"d\", type: Boolean },\n  { name: \"courses\", alias: \"c\" , type: Number }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   | `-hcd` | `{ hot: true, courses: null, discount: true }` |\n| 2   | `-hdc 3` | `{ hot: true, discount: true, courses: 3 }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+multiple\"></a>\n\n### option.multiple : <code>boolean</code>\nSet this flag if the option takes a list of values. You will receive an array of values, each passed through the `type` function (if specified).\n\n```js\n[\n  { name: \"files\", type: String, multiple: true }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 2   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 3   | `--files *` | `{ files: [ 'one.js', 'two.js' ] }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+defaultOption\"></a>\n\n### option.defaultOption : <code>boolean</code>\nAny unclaimed command-line args will be set on this option. This flag is typically set on the most commonly-used option to make for more concise usage (i.e. `$ myapp *.js` instead of `$ myapp --files *.js`).\n\n```js\n[\n  { name: \"files\", type: String, multiple: true, defaultOption: true }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 2   | `one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 3   | `*` | `{ files: [ 'one.js', 'two.js' ] }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+defaultValue\"></a>\n\n### option.defaultValue : <code>\\*</code>\nAn initial value for the option.\n\n```js\n[\n  { name: \"files\", type: String, multiple: true, defaultValue: [ \"one.js\" ] },\n  { name: \"max\", type: Number, defaultValue: 3 }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   |  | `{ files: [ 'one.js' ], max: 3 }` |\n| 2   | `--files two.js` | `{ files: [ 'two.js' ], max: 3 }` |\n| 3   | `--max 4` | `{ files: [ 'one.js' ], max: 4 }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+group\"></a>\n\n### option.group : <code>string</code> \\| <code>Array.&lt;string&gt;</code>\nWhen your app has a large amount of options it makes sense to organise them in groups.\n\nThere are two automatic groups: `_all` (contains all options) and `_none` (contains options without a `group` specified in their definition).\n\n```js\n[\n  { name: \"verbose\", group: \"standard\" },\n  { name: \"help\", group: [ \"standard\", \"main\" ] },\n  { name: \"compress\", group: [ \"server\", \"main\" ] },\n  { name: \"static\", group: \"server\" },\n  { name: \"debug\" }\n]\n```\n\n<table>\n <tr>\n   <th>#</th><th>Command Line</th><th>.parse() output</th>\n </tr>\n <tr>\n   <td>1</td><td><code>--verbose</code></td><td><pre><code>\n{\n _all: { verbose: true },\n standard: { verbose: true }\n}\n</code></pre></td>\n </tr>\n <tr>\n   <td>2</td><td><code>--debug</code></td><td><pre><code>\n{\n _all: { debug: true },\n _none: { debug: true }\n}\n</code></pre></td>\n </tr>\n <tr>\n   <td>3</td><td><code>--verbose --debug --compress</code></td><td><pre><code>\n{\n _all: {\n   verbose: true,\n   debug: true,\n   compress: true\n },\n standard: { verbose: true },\n server: { compress: true },\n main: { compress: true },\n _none: { debug: true }\n}\n</code></pre></td>\n </tr>\n <tr>\n   <td>4</td><td><code>--compress</code></td><td><pre><code>\n{\n _all: { compress: true },\n server: { compress: true },\n main: { compress: true }\n}\n</code></pre></td>\n </tr>\n</table>\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n\n\n* * *\n\n&copy; 2014-17 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/75lb/command-line-args.git"
  },
  "scripts": {
    "cover": "istanbul cover ./node_modules/.bin/test-runner test/*.js && cat coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf coverage; echo",
    "docs": "jsdoc2md -l off -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "test": "test-runner test/*.js"
  },
  "version": "4.0.7"
}
